# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

stages:
  - build
  - test
  - package
  - release
  - tag
  - publish

variables:
  SBT_OPTS: "-Dsbt.global.base=sbt-cache/sbtboot -Dsbt.boot.directory=sbt-cache/boot -Dsbt.ivy.home=sbt-cache/ivy"
  DOCKER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  DOCKER_IMAGE_LATEST: "$CI_REGISTRY_IMAGE:latest"
  DOCKER_APP_PATH: "target/scala-*/cs-kv-storage-*-jar-with-dependencies.jar"

cache:
  paths:
    - "sbt-cache/ivy/cache"
    - "sbt-cache/boot"
    - "sbt-cache/sbtboot"

build:
  stage: build
  script: sbt clean compile  
  tags:
    - build-in-docker
    - cs-eco-builder

test:
  stage: test
  script:
    - sbt test
  tags:
    - build-in-docker
    - cs-eco-builder

assembly:
  stage: package
  script:
    - sbt assembly
  artifacts:
   name: "$CI_COMMIT_REF_SLUG"
   paths:
     - $DOCKER_APP_PATH
  tags:
    - build-in-docker
    - cs-eco-builder

release:
  stage: release
  cache: {}
  variables:
    DOCKER_COMPOSE_FILE: "e2e/docker-compose.yml"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE --build-arg APP_PATH=$DOCKER_APP_PATH .
    - docker-compose --file=$DOCKER_COMPOSE_FILE up -d --force-recreate --build app
    - docker-compose --file=$DOCKER_COMPOSE_FILE up --build initializer
    - docker-compose --file=$DOCKER_COMPOSE_FILE run newman run cs-kv-storage.postman_collection.json --reporters=cli
    - docker push $DOCKER_IMAGE
  after_script:
    - docker-compose --file=$DOCKER_COMPOSE_FILE down --volumes
  dependencies:
    - assembly
  tags:
    - build-as-docker
    - cs-eco-builder

tag-master:
  stage: tag
  cache: {}
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker tag $DOCKER_IMAGE $DOCKER_IMAGE_LATEST
    - docker push $DOCKER_IMAGE_LATEST
  dependencies:
    - assembly
  only:
    - master
  tags:
    - build-as-docker
    - cs-eco-builder

publish-artifact:
  stage: publish
  script:
    - sbt publish
  only:
    - master
    - tags
  tags:
    - build-in-docker
    - cs-eco-builder
