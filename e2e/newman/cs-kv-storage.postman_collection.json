{
	"info": {
		"_postman_id": "f41060ce-c3a7-47ab-a2d1-f5550c2b30dd",
		"name": "cs-kv-storage",
		"description": "E2E tests for cs-kv-storage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "c7d1c0e9-0b87-4b2a-a40c-80843e204d85",
			"name": "kv-storage",
			"item": [
				{
					"_postman_id": "c59c5f20-aa61-42ba-b5f3-9bd503fc9e85",
					"name": "List keys",
					"item": [
						{
							"_postman_id": "aaa07966-62c8-41fa-82e2-001b7d685604",
							"name": "List a storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d355335-0953-4854-8c56-48beb876dfc2",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains list of keys\", function () {",
											"    var jsonData = pm.response.json().sort();",
											"    pm.expect(jsonData).to.eql(['key1', 'key2', 'key3', 'key4', 'key5']);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/list/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "0e19df49-771e-481c-82bb-3598cff8912e",
							"name": "List with wrong Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd438ae3-c029-47c9-9da1-b6d7f6bf2a7f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function() {",
											"  pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{wrong_secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/list/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "d7807841-13ed-431b-900c-2b27ed8e5f71",
							"name": "List without Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fac08d4-9812-4f85-8e9f-798b08418ebd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function() {",
											"  pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/list/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "29935aa5-78fe-4875-a9fb-0aaa67f64a01",
							"name": "List an empty storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2517b115-9ba1-4c38-ba67-debb430bade5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is an empty array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([]);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98982517-5143-481d-a85b-8eb037420a29",
										"type": "text/javascript",
										"exec": [
											"const es_url = pm.variables.get(\"es_url\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/list/empty",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"empty"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "a7e1b5f1-253c-4706-aa84-82af1d56f218",
							"name": "List nonexistent storage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2910574-e8fa-4909-a6b4-ce4fefc34250",
										"type": "text/javascript",
										"exec": [
											"const es_url = pm.variables.get(\"es_url\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1554d6eb-03b7-4d64-ae88-eaac04c9fed4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/list/nonexistent",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"nonexistent"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c60f670-969a-41c8-8a8b-7e214fa9852a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b8f7e24-ed2a-4917-8fe7-2325319de32d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "8ebc7599-0cda-452d-8f23-6d88a45f3bdb",
					"name": "Get value",
					"item": [
						{
							"_postman_id": "7aa86c3e-48e4-4162-b708-ff25573b5764",
							"name": "Get a value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "243f7d3c-db59-40fe-85cf-bf460eac8e91",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is text/plain\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is a \" + pm.variables.get(\"some_value\"), function () {",
											"    pm.expect(pm.response.text()).to.eql(pm.variables.get(\"some_value\"));",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "3d826bcb-4ebc-46b9-97ba-20709266a11d",
							"name": "Get with wrong Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ae26d6-5cd0-4706-b01a-9aa56649325c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function() {",
											"  pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{wrong_secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "3329b5e1-8876-46f4-b35d-af148dcf44f6",
							"name": "Get without Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d945e25-21bc-415e-bc00-995cef8acb39",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function() {",
											"  pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "44886ef3-41f0-47df-a331-90d1927ba950",
							"name": "Get nonexistent value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3e11298-d466-4d27-a46a-a84b4137d701",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}/{{empty_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}",
										"{{empty_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "b7f9aa08-50be-4875-a591-7aee0c98795d",
							"name": "Get from nonexistent storage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b5b3a0ca-49f9-4b38-9d82-64c6afb2d334",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3881f3bb-15aa-49b2-9203-0e7f0a479a14",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/get/{{non_existent_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{non_existent_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "acfe6b56-9863-4802-a1b4-1a24081550cc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bdb3fe18-a2da-400a-b983-1077bb202a25",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "33b74288-03be-4648-a49e-2031ceaf5ecc",
					"name": "Get multiple values",
					"item": [
						{
							"_postman_id": "d0453064-12fe-4be3-9c65-931834de82b0",
							"name": "Get multiple values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "419e39ab-5024-4e8d-9e1f-c2b977cbd0da",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is a map key to value\", function () {",
											"    var example = {",
											"        \"key1\": \"value1\",",
											"        \"key2\": \"value2\",",
											"        \"key3\": \"value3\"",
											"    }",
											"    pm.expect(pm.response.json()).to.eql(example);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "15b7fb29-909f-4009-a6bf-91d89359443b",
							"name": "Get with wrong Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26ff9642-16d1-405c-99a4-a806e1cb00a6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{wrong_secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "0de73c03-96de-4d29-9bfe-9c2cdba5440c",
							"name": "Get without Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26ff9642-16d1-405c-99a4-a806e1cb00a6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "e62b16df-3e0f-49d0-9877-b863b0591b38",
							"name": "Get from nonexistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ba83a0-c5e9-4089-a366-48c031f59c11",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/get/{{non_existent_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{non_existent_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "0a461636-433e-48b4-a6b0-18d5ce069ecb",
							"name": "Get with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "924874c6-58c0-4fc2-b28d-604c08a0a436",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "a48facba-36f5-417c-927b-32287cec1d6e",
							"name": "Get with bad json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f90777c6-79c7-41a0-ba3c-db8036a51b13",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\""
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "5e9deff4-607e-49be-b668-1a849ebff1ab",
							"name": "Get with wrong body format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f62666e-8edb-414f-ae53-1d5c150736d6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"key1\": \"value1\"}"
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "2566581f-c382-4040-a9dd-2f8e9b6485fd",
							"name": "Get nonexistent value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4442ce4e-af75-4242-ace7-c4438f476f17",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is a map key to value\", function () {",
											"    var example = {",
											"        \"key1\": \"value1\",",
											"        \"key2\": \"value2\",",
											"        \"key3\": \"value3\",",
											"        [pm.variables.get(\"empty_key\")]: null",
											"    }",
											"    pm.expect(pm.response.json()).to.eql(example);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\", \"{{empty_key}}\"]"
								},
								"url": {
									"raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{read_only_storage}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "32d84679-16ac-4fee-ae13-e0df8a33f653",
					"name": "Set value",
					"item": [
						{
							"_postman_id": "132da978-a069-42cc-904d-7bc6fb3fddf6",
							"name": "Set with wrong Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01cd35f7-fe03-4508-ae87-2f9747b41992",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"editable_storage\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Document is not changed\", function () {",
											"        pm.expect(res.json()._source.value).to.eql(pm.variables.get(\"some_value\"));",
											"    });",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546e693f-cf78-42ad-b416-ffdc2737ffc6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									},
									{
										"key": "Secret-Key",
										"value": "{{wrong_secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "newValue"
								},
								"url": {
									"raw": "{{url}}/set/{{editable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{editable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "2cc62afa-9522-4273-9088-547c8deecedf",
							"name": "Set without Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01cd35f7-fe03-4508-ae87-2f9747b41992",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"editable_storage\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Document is not changed\", function () {",
											"        pm.expect(res.json()._source.value).to.eql(pm.variables.get(\"some_value\"));",
											"    });",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546e693f-cf78-42ad-b416-ffdc2737ffc6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "newValue"
								},
								"url": {
									"raw": "{{url}}/set/{{editable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{editable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "69693c4a-bed0-4ce9-b4ea-de68007cbd70",
							"name": "Set with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7e683da-04ef-4858-9b29-359e6fead5de",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"editable_storage\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Document is not changed\", function () {",
											"        pm.expect(res.json()._source.value).to.eql(pm.variables.get(\"some_value\"));",
											"    });",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d296aab1-4aa2-4e1d-8b34-8e217df06b7e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "newValue"
								},
								"url": {
									"raw": "{{url}}/set/{{editable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{editable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "939ce1a2-d5ad-4855-9514-a298cf22855c",
							"name": "Set value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7d4cab6-a194-41e1-8126-ddf84e4a239c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"editable_storage\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Document actually indexed\", function () {",
											"        pm.expect(res.json()[\"_source\"][\"value\"]).to.eql(\"newValue\");",
											"    });",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546e693f-cf78-42ad-b416-ffdc2737ffc6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "newValue"
								},
								"url": {
									"raw": "{{url}}/set/{{editable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{editable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "8b1094dc-57a5-413e-9961-cfcf22911e18",
							"name": "Set in nonexistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a50046b-410c-4225-add2-2a802564d57e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546e693f-cf78-42ad-b416-ffdc2737ffc6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "newValue"
								},
								"url": {
									"raw": "{{url}}/set/{{non_existent_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{non_existent_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "a569e033-ae7f-4bc4-a154-6b3b7007b4ac",
							"name": "Set long value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b51f60b1-2fde-4cc5-a0c8-dbdc33e29a2e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546e693f-cf78-42ad-b416-ffdc2737ffc6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{long_value}}"
								},
								"url": {
									"raw": "{{url}}/set/{{editable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{editable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "1cf55749-0466-4431-84e0-8a9b9b838b64",
							"name": "Set long key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b51f60b1-2fde-4cc5-a0c8-dbdc33e29a2e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546e693f-cf78-42ad-b416-ffdc2737ffc6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									},
									{
										"key": "Secret-Key",
										"value": "secret"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "newValue"
								},
								"url": {
									"raw": "{{url}}/set/{{editable_storage}}/{{long_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{editable_storage}}",
										"{{long_key}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "6213c30a-926a-459d-a1f0-ac8b4f949c13",
					"name": "Set multiple values",
					"item": [
						{
							"_postman_id": "522d1bdf-8892-4e31-91f5-aa39f8dd64eb",
							"name": "Set with wrong Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1ef7dd3-ad10-45d5-a4b2-b4053af94f25",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c._id,",
											"                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"value1\"},",
											"                {key: \"key2\", value: \"value2\"},",
											"                {key: \"key3\", value: \"value3\"},",
											"                {key: \"key4\", value: \"value4\"}];",
											"            pm.expect(result).to.eql(example);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{wrong_secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n}"
								},
								"url": {
									"raw": "{{url}}/set/{{multieditable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{multieditable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "88421c03-8543-40cd-b361-65a1f96855fa",
							"name": "Set without Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1ef7dd3-ad10-45d5-a4b2-b4053af94f25",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c._id,",
											"                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"value1\"},",
											"                {key: \"key2\", value: \"value2\"},",
											"                {key: \"key3\", value: \"value3\"},",
											"                {key: \"key4\", value: \"value4\"}];",
											"            pm.expect(result).to.eql(example);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n}"
								},
								"url": {
									"raw": "{{url}}/set/{{multieditable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{multieditable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "b92547df-c229-47c5-855c-74aa203171b9",
							"name": "Set with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71e973a4-d61a-44f3-9e05-824c7bfcea72",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c._id,",
											"                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"value1\"},",
											"                {key: \"key2\", value: \"value2\"},",
											"                {key: \"key3\", value: \"value3\"},",
											"                {key: \"key4\", value: \"value4\"}];",
											"            pm.expect(result).to.eql(example);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n}"
								},
								"url": {
									"raw": "{{url}}/set/{{multieditable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{multieditable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "f2a80852-4022-4737-a4e1-f5632b0d5560",
							"name": "Set with bad json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07d22477-c4ed-457a-b4d7-b3a8be1901ae",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c._id,",
											"                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"value1\"},",
											"                {key: \"key2\", value: \"value2\"},",
											"                {key: \"key3\", value: \"value3\"},",
											"                {key: \"key4\", value: \"value4\"}];",
											"            pm.expect(result).to.eql(example);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n"
								},
								"url": {
									"raw": "{{url}}/set/{{multieditable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{multieditable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "6a841cdf-8a30-48fa-ac8d-23262685260d",
							"name": "Set with wrong body format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9ca34c3-fea7-4e36-b0ae-d472d731ef91",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c._id,",
											"                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"value1\"},",
											"                {key: \"key2\", value: \"value2\"},",
											"                {key: \"key3\", value: \"value3\"},",
											"                {key: \"key4\", value: \"value4\"}];",
											"            pm.expect(result).to.eql(example);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\"key1\": \"newValue1\"},\n\t{\"key2\": \"newValue2\"},\n\t{\"key3\": \"newValue3\"},\n\t{\"key4\": \"newValue4\"}\n]\n"
								},
								"url": {
									"raw": "{{url}}/set/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "dcef6930-8081-4eee-ada3-287114c58a2c",
							"name": "Set values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9fce8c3-f738-484e-bda5-e3cb563b2c93",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains statuses of operations\", function () {",
											"    var jsonData = pm.response.json();",
											"    var example = {",
											"        \"key1\" : true,",
											"        \"key2\" : true,",
											"        \"key3\" : true,",
											"        \"key4\" : true",
											"    }",
											"    pm.expect(jsonData).to.eql(example);",
											"});",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are actually indexed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c[\"_id\"],",
											"                    value: c[\"_source\"][\"value\"]",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"newValue1\"},",
											"                {key: \"key2\", value: \"newValue2\"},",
											"                {key: \"key3\", value: \"newValue3\"},",
											"                {key: \"key4\", value: \"newValue4\"}];",
											"    });",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n}"
								},
								"url": {
									"raw": "{{url}}/set/{{multieditable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{multieditable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "da33ccf5-f875-4e41-8e11-24bf064a3b4c",
							"name": "Set long value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8c41231-e75c-4528-b098-15499f95561c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains statuses of operations\", function () {",
											"    var jsonData = pm.response.json();",
											"    var example = {",
											"        \"key11\" : false,",
											"        \"key12\" : true,",
											"        \"key13\" : true,",
											"        \"key14\" : true",
											"    }",
											"    pm.expect(jsonData).to.eql(example);",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key12\",\"key13\",\"key14\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are actually indexed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c[\"_id\"],",
											"                    value: c[\"_source\"][\"value\"]",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key12\", value: \"newValue2\"},",
											"                {key: \"key13\", value: \"newValue3\"},",
											"                {key: \"key14\", value: \"newValue4\"}];",
											"    });",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/key11\",",
											"        method: 'HEAD'},",
											"    function (err, res) {",
											"        pm.expect(res.status).to.eql(404);    ",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key11\": \"{{long_value}}\",\n\t\"key12\": \"newValue2\",\n\t\"key13\": \"newValue3\",\n\t\"key14\": \"newValue4\"\n}"
								},
								"url": {
									"raw": "{{url}}/set/{{multieditable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{multieditable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "3f884bb1-00a1-4c4a-9ebf-bdfba46e76cb",
							"name": "Set in nonexistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26f39146-9fc7-456b-ac4e-fe698208a2df",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n}"
								},
								"url": {
									"raw": "{{url}}/set/{{non_existent_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{non_existent_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "b96a9dea-b0a9-4a51-99cc-d1fcb82439e9",
							"name": "Set long key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a24e89f6-3db4-4b80-93b4-33ec05406400",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains statuses of operations\", function () {",
											"    var jsonData = pm.response.json();",
											"    var example = {",
											"        [pm.variables.get(\"long_key\")] : false,",
											"        \"key112\" : true,",
											"        \"key113\" : true,",
											"        \"key114\" : true",
											"    }",
											"    pm.expect(jsonData).to.eql(example);",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key112\",\"key113\",\"key114\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are actually indexed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c[\"_id\"],",
											"                    value: c[\"_source\"][\"value\"]",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key112\", value: \"newValue2\"},",
											"                {key: \"key113\", value: \"newValue3\"},",
											"                {key: \"key114\", value: \"newValue4\"}];",
											"    });",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/\" +pm.variables.get(\"long_key\"),",
											"        method: 'HEAD'},",
											"    function (err, res) {",
											"        pm.expect(res.status).to.eql(404);    ",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"{{long_key}}\": \"newValue1\",\n\t\"key112\": \"newValue2\",\n\t\"key113\": \"newValue3\",\n\t\"key114\": \"newValue4\"\n}"
								},
								"url": {
									"raw": "{{url}}/set/{{multieditable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{multieditable_storage}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "59ba4aaa-343d-4018-977e-807651a3ba63",
					"name": "Delete value",
					"item": [
						{
							"_postman_id": "489fa9bb-ffe2-4c3c-bdea-7a543b0d1881",
							"name": "Delete with wrong Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75fbdd51-e33e-4a33-9550-084330b8ec8e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "530b5c22-7ca1-49dd-955e-ff22d92f122d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{wrong_secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/delete/{{deletable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{deletable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "7aa87af7-c963-4fb4-94ff-a823ff49d46f",
							"name": "Delete without Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75fbdd51-e33e-4a33-9550-084330b8ec8e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "530b5c22-7ca1-49dd-955e-ff22d92f122d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/delete/{{deletable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{deletable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "a9ef4e2b-f32a-46b3-9bf7-59641829d2ae",
							"name": "Delete from nonexistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5053937f-d3bd-4bc9-af0a-012e7a6f0895",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "530b5c22-7ca1-49dd-955e-ff22d92f122d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/delete/{{non_existent_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{non_existent_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "639a2e96-5fb6-411a-95f8-ede364f27df7",
							"name": "Delete value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "838612af-7652-4cbe-8a1d-c39d2d8dbe01",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"deletable_storage\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Document is actually deleted\", function () {",
											"            pm.expect(res.json().found).to.eql(false);",
											"        });",
											"    }",
											");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "530b5c22-7ca1-49dd-955e-ff22d92f122d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/delete/{{deletable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{deletable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "14e9d2b3-e412-46ac-ac41-4b793b38628a",
							"name": "Delete nonexistent value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d492bd0e-3c75-4b76-a178-7447baa9575b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "530b5c22-7ca1-49dd-955e-ff22d92f122d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/delete/{{deletable_storage}}/{{empty_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{deletable_storage}}",
										"{{empty_key}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "db23bfb0-7be7-4a25-b99b-f71c0791986f",
					"name": "Delete multiple values",
					"item": [
						{
							"_postman_id": "1075176d-966d-4d91-a72f-ec6effe026c1",
							"name": "Delete with wrong Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "821e3da5-8cba-4728-8c36-1e31cd223e9a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multideletable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{wrong_secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{multideletable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "aee59041-cc71-4733-9018-e9fd8b66bdc1",
							"name": "Delete without Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "821e3da5-8cba-4728-8c36-1e31cd223e9a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multideletable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{multideletable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "3b65ddf6-6e44-404c-b832-1700f62afd2c",
							"name": "Delete with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "454e7675-3e94-4e07-abc0-1fd1739577f2",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multideletable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{multideletable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "25077dee-8be3-4488-8a5a-25846fcd75ea",
							"name": "Delete with bad json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a3b4a3f-10a5-4bb9-89a8-b219dc784403",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multideletable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\""
								},
								"url": {
									"raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{multideletable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "ec41b691-e8f5-4917-99a0-6ca87d0cb091",
							"name": "Delete with wrong body format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8149f84-eda1-4f3f-9fde-cab72c57656f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multideletable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"keys\" : [\"key1\", \"key2\", \"key3\"] }"
								},
								"url": {
									"raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{multideletable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "b7ea258a-aa6e-461b-92e8-c665dc5de001",
							"name": "Delete values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bbe1693-2136-4b00-a71c-e1697864fa72",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains statuses of operations\", function () {",
											"    var jsonData = pm.response.json();",
											"    var example = {",
											"        \"key1\" : true,",
											"        \"key2\" : true,",
											"        \"key3\" : true",
											"    }",
											"    pm.expect(jsonData).to.eql(example);",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"multideletable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents actually deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return !c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{multideletable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "907424c4-9d1d-4190-ad9d-635686c5c53e",
							"name": "Delete from nonexistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e84fb5c5-9502-4142-9173-230b61af26b0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/delete/{{non_existent_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{non_existent_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "cf5dbf06-2af5-4d91-bde5-b5c50ec3103b",
							"name": "Delete nonexistent value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5f2a6a5-5a5e-438a-a965-8fe6840f4b47",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains statuses of operations\", function () {",
											"    var jsonData = pm.response.json();",
											"    var example = {",
											"        [pm.variables.get(\"empty_key\")] : true",
											"    }",
											"    pm.expect(jsonData).to.eql(example);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"{{empty_key}}\"]"
								},
								"url": {
									"raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{multideletable_storage}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "3b0ec30b-1ddf-491c-821c-fd081801b120",
					"name": "Clear storage",
					"item": [
						{
							"_postman_id": "75e68396-14e2-4368-8869-a1081cea59db",
							"name": "Clear storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e939ce71-26ea-49c9-8210-60556275a03d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"var test = function() {",
											"    pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/\" + pm.variables.get(\"storage_data_template\") + \"-\" + pm.variables.get(\"cleanable_storage\") + \"/_doc/_search\",",
											"        method: 'POST',",
											"        header: 'Content-Type:application/json',",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({\"query\": {\"match_all\": {}}})",
											"        }},",
											"    function (err, res) {",
											"        pm.test(\"Storage is clear\", function() {",
											"            pm.expect(res.json().hits.total).to.eql(0);",
											"        });",
											"});",
											"};",
											"setTimeout(test, 1500);",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f04a838-3537-4dd5-83cd-e97ba1a13787",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/clear/{{cleanable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"clear",
										"{{cleanable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "66bf9d49-e05d-4573-b22c-02e3efb8212c",
							"name": "Clear with wrong Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d8168cf-96ae-4e50-a076-b6ac541ff002",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f04a838-3537-4dd5-83cd-e97ba1a13787",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{wrong_secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/clear/{{cleanable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"clear",
										"{{cleanable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "397b8e1a-a0b8-4d78-b149-9c58f5a7a100",
							"name": "Clear without Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d8168cf-96ae-4e50-a076-b6ac541ff002",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f04a838-3537-4dd5-83cd-e97ba1a13787",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/clear/{{cleanable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"clear",
										"{{cleanable_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "896e711d-209f-4d71-9fc8-5c60f14ca8dc",
							"name": "Clear nonexistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ec3e5af-5f8c-44ac-bb8e-266320e5a421",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f04a838-3537-4dd5-83cd-e97ba1a13787",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/clear/{{non_existent_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"clear",
										"{{non_existent_storage}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1614f2d8-26fe-4d0d-bcc6-d35f15fdd259",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bb925800-7558-47e4-966c-d611b1567ccd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"_postman_id": "f21612b5-56c1-4014-b7b1-44d73dc3250f",
			"name": "kv-storage-manager",
			"item": [
				{
					"_postman_id": "048dd197-8937-4934-8f6b-794f7900cf97",
					"name": "Set temporary storage ttl",
					"item": [
						{
							"_postman_id": "91164e50-9286-4789-b0b2-d01e8538fc99",
							"name": "Set TTL of nonexistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "164d5bf7-f101-4d95-a3f8-1e410302ff90",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"})",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/storage/{{non_existent_storage}}?ttl=565656",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"{{non_existent_storage}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "565656"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "6432913e-6bed-4370-89b8-d9db54fad659",
							"name": "Set TTL of persistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "588b00a6-5bcf-48fd-a01e-a03d0c2a8748",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"})",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"acc_storage\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"TTL is not set\", function () {",
											"            pm.expect(res.json()._source.ttl).to.eql(undefined);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/storage/{{acc_storage}}?ttl=565656",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"{{acc_storage}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "565656"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "a4d89b03-8597-4cd9-aba3-55dfb1bfe417",
							"name": "Set bad TTL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5af7de9a-4d90-428a-af97-53330b3314c4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"})",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"temp_storage\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"TTL is not changed\", function () {",
											"            pm.expect(res.json()._source.ttl).to.eql(10000);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/storage/{{temp_storage}}?ttl=10.seconds",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"{{temp_storage}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "10.seconds"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "2e4bbaee-730d-4fa6-a341-9a0da2d65ba3",
							"name": "Set without TTL specified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0bbceeda-3ca6-4c4a-98ee-483930feabc9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"})",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"temp_storage\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"TTL is not changed\", function () {",
											"            pm.expect(res.json()._source.ttl).to.eql(10000);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/storage/{{temp_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"{{temp_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "43dd3d86-be40-412c-880c-1a6fdb596df6",
							"name": "Set temporary storage ttl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29760974-f725-40bb-b399-367d69190275",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"temp_storage\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"TTL and expiration timestamp actually changed\", function () {",
											"            pm.expect(res.json()._source.ttl).to.eql(565656);",
											"            pm.expect(res.json()._source.expiration_timestamp).to.eql(1565656);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/storage/{{temp_storage}}?ttl=565656",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"{{temp_storage}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "565656"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "dc49c2ac-8a20-413e-8bb2-1ef4a89aec2a",
					"name": "Delete temporary storage",
					"item": [
						{
							"_postman_id": "c96a2935-a592-4911-8dd3-765598cb476d",
							"name": "Delete persistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae335863-bb13-488e-b45f-b00cd8872de2",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"acc_storage\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Storage is not deleted\", function () {",
											"            pm.expect(res).to.have.property('code', 200);",
											"            pm.expect(res).to.have.property('status', 'OK');",
											"            pm.expect(res.json()._source.deleted).to.eql(false);",
											"        });",
											"",
											"    }",
											");"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/storage/{{acc_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"{{acc_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "00aeea50-4884-4360-b349-cab5c6b78c5a",
							"name": "Delete nonexistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f098c7a9-7991-4119-9ee3-e8a8a653367a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/storage/{{non_existent_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"{{non_existent_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "1a4bdbeb-4431-42eb-b9f2-3b1f5fa5f109",
							"name": "Delete temporary storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "122029a7-7015-4c37-9bd6-4f92b620fef8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"temp_storage\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Storage is deleted\", function () {",
											"            pm.expect(res).to.have.property('code', 200);",
											"            pm.expect(res).to.have.property('status', 'OK');",
											"            pm.expect(res.json()._source.deleted).to.eql(true);",
											"        });",
											"    }",
											");",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/storage/{{temp_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"{{temp_storage}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"_postman_id": "d847b464-54f2-442d-9b76-9131167cfdeb",
			"name": "kv-history",
			"item": [
				{
					"_postman_id": "d9b82be9-ad79-4735-8296-a33459897179",
					"name": "Search and list history",
					"item": [
						{
							"_postman_id": "51ffa677-f799-4281-87b3-227ac8b2c61c",
							"name": "validation",
							"item": [
								{
									"_postman_id": "9ee2ee76-bf71-4679-902a-f19b54b14837",
									"name": "Search without Secret-Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f028cc27-f634-4e20-a368-f3bc8d9fd2df",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 401\", function() {",
													"  pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?size=2&page=3",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "size",
													"value": "2"
												},
												{
													"key": "page",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "d5139f87-5adf-49dc-bc44-ab246ec00406",
									"name": "Search with invalid operations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?operations=set,clear,invalid",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "operations",
													"value": "set,clear,invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "a0d52dbd-a487-4190-9120-5480e434bd9a",
									"name": "Search with invalid start",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?start=today",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "start",
													"value": "today"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "a99bb7e8-b1eb-4fa7-beb6-9af00a65ba11",
									"name": "Search with negative start",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?start=-1000",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "start",
													"value": "-1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "b6405144-df73-4856-8a4d-1acf10aadeb5",
									"name": "Search with invalid end",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?end=today",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "end",
													"value": "today"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "19b9c98f-a1a3-4922-a447-f9ff18d6d2b5",
									"name": "Search with negative end",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?end=-1000",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "end",
													"value": "-1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "c965cd38-6c48-4f1b-a832-f88fe768237a",
									"name": "Search with start > end",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?start=1000&end=500",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "start",
													"value": "1000"
												},
												{
													"key": "end",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "0a5bdb59-379e-4169-b09f-188ed7d299bf",
									"name": "Search with invalid size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?size=large",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "size",
													"value": "large"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "a45ea696-9bec-49c7-8a3b-263e3e1714f1",
									"name": "Search with negative size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?size=-1000",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "size",
													"value": "-1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "7cf67f94-6234-4c37-ac17-a91b95981731",
									"name": "Search with invalid page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?page=first",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "page",
													"value": "first"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "4d79376f-5c86-42dd-b2d6-14f47261e035",
									"name": "Search with negative page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?page=-1000",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "page",
													"value": "-1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "e1771188-e3e6-4a5f-a082-e2099f42cffb",
									"name": "Search with invalid scroll",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?scroll=1.day",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "scroll",
													"value": "1.day"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "f3d6b136-778f-4b8f-a788-ba293df388ea",
									"name": "Search with negative scroll",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?scroll=-1000",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "scroll",
													"value": "-1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "62445352-9a46-4f0a-bd9b-639f17aefbc0",
									"name": "Search with invalid sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?sort=bubble",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "bubble"
												}
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "dad67157-35de-4267-9ec6-3d947b1672c2",
									"name": "Search with opposite sort options",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc2445c-74cb-4e4c-95a6-db85ef32a08e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body is empty\", function () {",
													"    pm.response.to.have.body(\"\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Secret-Key",
												"value": "{{secret}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/history/{{read_only_storage}}?sort=timestamp,key,-timestamp",
											"host": [
												"{{url}}"
											],
											"path": [
												"history",
												"{{read_only_storage}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "timestamp,key,-timestamp"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"_postman_id": "9231cb3d-e972-4dd9-9520-8ba4162a2028",
							"name": "Search with keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14c94906-0edb-4495-a6f3-97ad2632c9a1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.page).to.eql(1);",
											"    pm.expect(json.items.every(function(cur){return cur.key===\"key2\" || cur.key===\"key3\"})).to.eql(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?keys=key2,key3",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "keys",
											"value": "key2,key3"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "0e713a51-186c-4892-b4ab-c028988f6fe4",
							"name": "Search with duplicated keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ce0f346-dd37-4888-85c0-5e434fb99548",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.page).to.eql(1);",
											"    pm.expect(json.items.every(function(cur){return cur.key==\"key2\"})).to.eql(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?keys=key2,key2",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "keys",
											"value": "key2,key2"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "20d53a70-ef10-4a07-abe9-0b2c52c30cfe",
							"name": "Search with start",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0e81d7b-34c5-42f3-a9df-ee10a002ba26",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.page).to.eql(1);",
											"    pm.expect(json.items.every(function(cur){return cur.timestamp>=1011})).to.eql(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?start=1011",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "start",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "f15a4894-ca0f-4d57-906e-e5576f4d5d8a",
							"name": "Search with end",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4560c0c6-7700-49e8-b561-76df3eb1a452",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.page).to.eql(1);",
											"    pm.expect(json.items.every(function(cur){return cur.timestamp<=1010})).to.eql(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?end=1010",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "end",
											"value": "1010"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "739ea224-faf8-4cd6-a8fa-5fda127f090d",
							"name": "Search with sorts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9c2dd82-5557-4507-b2c0-3700276ec1c1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var example = {",
											"        \"total\": 8,",
											"        \"size\": 8,",
											"        \"page\": 1,",
											"        \"items\": [",
											"            {\"key\": \"key1\", \"value\": \"value\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key1\", \"value\": \"value1\", \"timestamp\": 1011, \"operation\": \"set\"},",
											"            {\"key\": \"key2\", \"value\": \"value2\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key3\", \"value\": \"value3\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key4\", \"value\": \"value4\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key5\", \"value\": \"value5\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key6\", \"value\": \"value6\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key6\", \"value\": null, \"timestamp\": 1011, \"operation\": \"delete\"}",
											"        ]",
											"    };",
											"    pm.expect(pm.response.json()).to.eql(example);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?sort=key,timestamp",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "sort",
											"value": "key,timestamp"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "ee32e588-d48a-4023-82fb-17098e205c31",
							"name": "Search with duplicated sorts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9c2dd82-5557-4507-b2c0-3700276ec1c1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var example = {",
											"        \"total\": 8,",
											"        \"size\": 8,",
											"        \"page\": 1,",
											"        \"items\": [",
											"            {\"key\": \"key1\", \"value\": \"value\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key1\", \"value\": \"value1\", \"timestamp\": 1011, \"operation\": \"set\"},",
											"            {\"key\": \"key2\", \"value\": \"value2\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key3\", \"value\": \"value3\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key4\", \"value\": \"value4\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key5\", \"value\": \"value5\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key6\", \"value\": \"value6\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key6\", \"value\": null, \"timestamp\": 1011, \"operation\": \"delete\"}",
											"        ]",
											"    };",
											"    pm.expect(pm.response.json()).to.eql(example);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?sort=key,timestamp,key",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "sort",
											"value": "key,timestamp,key"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "28e3d30f-39f0-4de0-8507-932258a7b36d",
							"name": "Search with sort in descending order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9e30f93-78e4-4581-8205-80c3eea69978",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var example = {",
											"        \"total\": 8,",
											"        \"size\": 8,",
											"        \"page\": 1,",
											"        \"items\": [",
											"            {\"key\": \"key6\", \"value\": null, \"timestamp\": 1011, \"operation\": \"delete\"},",
											"            {\"key\": \"key6\", \"value\": \"value6\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key5\", \"value\": \"value5\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key4\", \"value\": \"value4\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key3\", \"value\": \"value3\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key2\", \"value\": \"value2\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"            {\"key\": \"key1\", \"value\": \"value1\", \"timestamp\": 1011, \"operation\": \"set\"},",
											"            {\"key\": \"key1\", \"value\": \"value\", \"timestamp\": 1010, \"operation\": \"set\"}",
											"        ]",
											"    };",
											"    pm.expect(pm.response.json()).to.eql(example);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?sort=-key,-timestamp",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "sort",
											"value": "-key,-timestamp"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "0b20f044-df9e-4a53-9cd4-4bb17d926bba",
							"name": "Search with operations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0619705-f8fa-45c6-aceb-b0509aac8b61",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.page).to.eql(1);",
											"    pm.expect(json.items.every(function(cur){return cur.operation==\"delete\" || cur.operation==\"clear\"})).to.eql(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?operations=delete,clear",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "operations",
											"value": "delete,clear"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "bc52eefa-f15f-4329-9089-78b83ad96ac1",
							"name": "Search with duplicated operations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c14b2ad6-a2a0-4ac6-ad52-ff8af396767f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.page).to.eql(1);",
											"    pm.expect(json.items.every(function(cur){return cur.operation==\"delete\"})).to.eql(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?operations=delete,delete",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "operations",
											"value": "delete,delete"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "b022990a-0e6d-45f6-8b35-0ed8ff4cd402",
							"name": "Search with page and size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8151b13e-3f01-4cd3-a47c-86faace150d6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.total).to.eql(8);",
											"    pm.expect(json.size).to.eql(2);",
											"    pm.expect(json.page).to.eql(3);",
											"    pm.expect(json.items.length).to.eql(2);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?size=2&page=3",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "02829120-228b-467a-b255-30f516a820fe",
							"name": "Search with scroll and size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c024a1b-2fe8-41c9-82fb-f9a111f8bfd5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.total).to.eql(8);",
											"    pm.expect(json.size).to.eql(3);",
											"    pm.expect(json.scrollId).to.not.eql(\"\");",
											"    pm.expect(json.items.length).to.eql(3);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?scroll=30000&size=3",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "scroll",
											"value": "30000"
										},
										{
											"key": "size",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "5f4a0861-17e1-48e2-b530-54fcbcbef69d",
							"name": "Search with page and scroll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d420353-d65e-461b-a438-80e4a93bc356",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.total).to.eql(8);",
											"    pm.expect(json.size).to.eql(3);",
											"    pm.expect(json.scrollId).to.not.eql(\"\");",
											"    pm.expect(json.items.length).to.eql(3);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?page=2&scroll=30000&size=3",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "scroll",
											"value": "30000"
										},
										{
											"key": "size",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "ea5be564-8ae3-40d8-8591-f85c0cd1da8c",
							"name": "Search in storage that does not support history",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a6af6c9-eac7-4768-bfe9-c03323a22d59",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{no_history_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{no_history_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "65117272-1fa1-4ed0-ad58-fcbd4dc64176",
							"name": "Search in storage that does not have history storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0caf0a9d-2644-4ecc-a80e-1109bc5fa65d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function() {",
											"  pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{acc_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{acc_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "b610aed9-1f26-4150-aaa9-f3bbeee30745",
							"name": "Search in nonexistent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce25fae6-c354-472b-8b64-7c200883b6e6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{non_existent_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{non_existent_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "2ba0a7eb-a32a-418f-8c21-ffe7fad3e4c5",
							"name": "Search with wrong Secret-Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f92736c8-9097-4a4d-be7f-fec1a82dd3b1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function() {",
											"  pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Secret-Key",
										"value": "{{wrong_secret}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/history/{{read_only_storage}}?scroll=30000&size=3",
									"host": [
										"{{url}}"
									],
									"path": [
										"history",
										"{{read_only_storage}}"
									],
									"query": [
										{
											"key": "scroll",
											"value": "30000"
										},
										{
											"key": "size",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "5f3663c6-b96d-413e-8676-31ffb9410ee6",
					"name": "List history",
					"item": [
						{
							"_postman_id": "b7a48e80-c583-4352-9e54-1cd78ca2e8f6",
							"name": "List history for subsequent request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc97e805-f917-463e-8eef-15be36d9da72",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is valid\", function () {",
											"    var json = pm.response.json()",
											"    var items = [",
											"        {\"key\": \"key3\", \"value\": \"value3\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"        {\"key\": \"key4\", \"value\": \"value4\", \"timestamp\": 1010, \"operation\": \"set\"},",
											"        {\"key\": \"key5\", \"value\": \"value5\", \"timestamp\": 1010, \"operation\": \"set\"}",
											"    ];",
											"    pm.expect(json.total).to.eql(8);",
											"    pm.expect(json.size).to.eql(3);",
											"    pm.expect(json.scrollId).to.not.eql(\"\");",
											"    pm.expect(json.items).to.eql(items);",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f25f6b6-7a29-4e7f-a005-273b3a007239",
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest({",
											"        url: pm.variables.get(\"url\") + \"/history/\" + pm.variables.get(\"read_only_storage\") + \"?scroll=30000&size=3&sort=key\",",
											"        method: 'GET',",
											"        header: 'Secret-Key:secret'",
											"},",
											"    function (err, res) {",
											"        pm.environment.set(\"scrollId\", res.json().scrollId);",
											"    }",
											");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scrollId\": \"{{scrollId}}\",\n\t\"timeout\": 30000\n}"
								},
								"url": {
									"raw": "{{url}}/history",
									"host": [
										"{{url}}"
									],
									"path": [
										"history"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "7f8f32e7-930a-48da-b54c-3a23acfe6a23",
							"name": "List history with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7485668-0fec-4cfc-9bf6-ee3b00828a5c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b6634035-57df-4cce-b603-b9d975442a53",
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest({",
											"        url: pm.variables.get(\"url\") + \"/history/\" + pm.variables.get(\"read_only_storage\") + \"?scroll=30000&size=3&sort=key\",",
											"        method: 'GET'",
											"},",
											"    function (err, res) {",
											"        pm.environment.set(\"scrollId\", res.json().scrollId);",
											"    }",
											");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scrollId\": \"{{scrollId}}\",\n\t\"timeout\": 30000\n}"
								},
								"url": {
									"raw": "{{url}}/history",
									"host": [
										"{{url}}"
									],
									"path": [
										"history"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "7c6d06ed-0827-4691-a70c-97b085a04346",
							"name": "List history with invalid json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7485668-0fec-4cfc-9bf6-ee3b00828a5c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e95e4be4-f69d-46a5-9a16-1392f1b1f37d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scrollId\": \"scrollId\"\n\t\"timeout\": 30000\n}"
								},
								"url": {
									"raw": "{{url}}/history",
									"host": [
										"{{url}}"
									],
									"path": [
										"history"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "c2c43ac6-ddf0-4dba-9333-dcb00eb3f7ae",
							"name": "List history with invalid timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7485668-0fec-4cfc-9bf6-ee3b00828a5c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c232a1b-fc31-43cd-871a-2c65cc4611d0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scrollId\": \"scrollId\",\n\t\"timeout\": \"30sec\"\n}"
								},
								"url": {
									"raw": "{{url}}/history",
									"host": [
										"{{url}}"
									],
									"path": [
										"history"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "de386823-3ff5-4775-8f24-4db9ff122e4a",
							"name": "List history with invalid scroll id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7485668-0fec-4cfc-9bf6-ee3b00828a5c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7c39ca55-2f19-4a81-b1c0-5ce8e2b03c1d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scrollId\": 1,\n\t\"timeout\": 30000\n}"
								},
								"url": {
									"raw": "{{url}}/history",
									"host": [
										"{{url}}"
									],
									"path": [
										"history"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "f75cd040-e087-4bba-b2f5-efb3a7115259",
							"name": "List history with expired/nonexistent scroll id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7485668-0fec-4cfc-9bf6-ee3b00828a5c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae17ccf4-cc49-46e3-a1c6-ee38807fab69",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\u0001\n\t\"scrollId\": \"DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAAzFjJuVGlDMnQ2U2FXNFItMERyTGo2M1EAAAAAAAAANBYyblRpQzJ0NlNhVzRSLTBEckxqNjNRAAAAAAAAADUWMm5UaUMydDZTYVc0Ui0wRHJMajYzUQAAAAAAAAA2FjJuVGlDMnQ2U2FXNFItMERyTGo2M1EAAAAAAAAANxYyblRpQzJ0NlNhVzRSLTBEckxqNjNR\",\n\t\"timeout\": 30000\n}"
								},
								"url": {
									"raw": "{{url}}/history",
									"host": [
										"{{url}}"
									],
									"path": [
										"history"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"_postman_id": "4758e914-1de0-406e-8d71-df15549065ac",
			"name": "health",
			"item": [
				{
					"_postman_id": "45a15a4a-a217-4bc7-b3d1-884f7771cd96",
					"name": "Check health",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91566781-aaab-45c6-af73-f5b7d6cff594",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is empty\", function () {",
									"    pm.response.to.have.body(\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/health",
							"host": [
								"{{url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "1a59aadb-2e44-4612-837c-9b90e5a574f2",
					"name": "Check health detailed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2276f893-f223-43aa-a5ba-9bb6364f25ec",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body contains detailed checks info\", function () {",
									"    var example = {",
									"        status: \"HEALTHY\",",
									"        checks: [",
									"            {",
									"                name: \"STORAGE_REGISTRY\",",
									"                status: \"HEALTHY\",",
									"                message: \"OK\"",
									"            },",
									"            {",
									"                name: \"STORAGE_DATA_TEMPLATE\",",
									"                status: \"HEALTHY\",",
									"                message: \"OK\"",
									"            },",
									"            {",
									"                name: \"STORAGE_HISTORY_TEMPLATE\",",
									"                status: \"HEALTHY\",",
									"                message: \"OK\"",
									"            }]",
									"    };",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql(example);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/health?detailed=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"health"
							],
							"query": [
								{
									"key": "detailed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c3c3e030-5912-4ad1-bdc5-8b71ee99f6e4",
					"name": "Unhealthy registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7950abda-8fca-4d49-95c1-2b8da8ddd536",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body contains detailed checks info\", function () {",
									"    var example = {",
									"        status: \"UNHEALTHY\",",
									"        checks: [",
									"            {",
									"                name: \"STORAGE_REGISTRY\",",
									"                status: \"UNHEALTHY\",",
									"                message: \"Not found\"",
									"            },",
									"            {",
									"                name: \"STORAGE_DATA_TEMPLATE\",",
									"                status: \"HEALTHY\",",
									"                message: \"OK\"",
									"            },",
									"            {",
									"                name: \"STORAGE_HISTORY_TEMPLATE\",",
									"                status: \"HEALTHY\",",
									"                message: \"OK\"",
									"            }]",
									"    };",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql(example);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c54850c2-147e-482f-8f2a-fcd50877925b",
								"type": "text/javascript",
								"exec": [
									"const es_url = pm.variables.get(\"es_url\");",
									"const storage_registry = pm.variables.get(\"storage_registry\");",
									"//remove storage registry",
									"pm.sendRequest({",
									"  url: es_url + \"/\" + storage_registry,",
									"  method: 'DELETE'",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/health?detailed=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"health"
							],
							"query": [
								{
									"key": "detailed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "e839424e-1a6f-4bda-87bd-fb60b825a8ae",
					"name": "Unhealthy registry and storage template",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c974abbf-ae8a-4b9c-9b1e-9f087a30dbfd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body contains detailed checks info\", function () {",
									"    var example = {",
									"        status: \"UNHEALTHY\",",
									"        checks: [",
									"            {",
									"                name: \"STORAGE_REGISTRY\",",
									"                status: \"UNHEALTHY\",",
									"                message: \"Not found\"",
									"            },",
									"            {",
									"                name: \"STORAGE_DATA_TEMPLATE\",",
									"                status: \"UNHEALTHY\",",
									"                message: \"Not found\"",
									"            },",
									"            {",
									"                name: \"STORAGE_HISTORY_TEMPLATE\",",
									"                status: \"HEALTHY\",",
									"                message: \"OK\"",
									"            }]",
									"    };",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql(example);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e95c134-0741-47dd-8826-1d4cccacc60b",
								"type": "text/javascript",
								"exec": [
									"const es_url = pm.variables.get(\"es_url\");",
									"const storage_data_template = pm.variables.get(\"storage_data_template\");",
									"//remove storage registry",
									"pm.sendRequest({",
									"  url: es_url + \"/_template/\" + storage_data_template,",
									"  method: 'DELETE'",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/health?detailed=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"health"
							],
							"query": [
								{
									"key": "detailed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "8903083c-2c96-40ee-adc7-7f20fc1e224e",
					"name": "Fully unhealthy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba313573-16b9-4393-aa11-e86a9febacac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body contains detailed checks info\", function () {",
									"    var example = {",
									"        status: \"UNHEALTHY\",",
									"        checks: [",
									"            {",
									"                name: \"STORAGE_REGISTRY\",",
									"                status: \"UNHEALTHY\",",
									"                message: \"Not found\"",
									"            },",
									"            {",
									"                name: \"STORAGE_DATA_TEMPLATE\",",
									"                status: \"UNHEALTHY\",",
									"                message: \"Not found\"",
									"            },",
									"            {",
									"                name: \"STORAGE_HISTORY_TEMPLATE\",",
									"                status: \"UNHEALTHY\",",
									"                message: \"Not found\"",
									"            }]",
									"    };",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql(example);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e30e048-2f49-4a4d-bbbd-f551ffe330b3",
								"type": "text/javascript",
								"exec": [
									"const es_url = pm.variables.get(\"es_url\");",
									"const storage_history_template = pm.variables.get(\"storage_history_template\");",
									"//remove storage registry",
									"pm.sendRequest({",
									"  url: es_url + \"/_template/\" + storage_history_template,",
									"  method: 'DELETE'",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/health?detailed=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"health"
							],
							"query": [
								{
									"key": "detailed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "47257ac9-4e9a-40a2-b4bf-5a2fda812bbb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "738f7413-5a71-432e-9df7-1cc3f7995c7a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "aee5b738-840f-42e5-b244-da36a3232128",
			"key": "url",
			"value": "http://app:8080",
			"type": "string"
		},
		{
			"id": "5af459bd-1122-4f2e-89f9-4f4a8b529913",
			"key": "storage_uuid",
			"value": "b3d1b2a6-bd5b-49d5-bd9e-86538fdc180d",
			"type": "string"
		},
		{
			"id": "a4790982-39be-4df7-9379-cfcee2966246",
			"key": "es_url",
			"value": "http://elasticsearch:9200",
			"type": "string"
		},
		{
			"id": "d058395a-f481-40fe-a9e1-9c055d47d542",
			"key": "some_key",
			"value": "key1",
			"type": "string"
		},
		{
			"id": "8653d7cf-395c-4dd5-841a-d0654b87112f",
			"key": "empty_key",
			"value": "empty_key",
			"type": "string"
		},
		{
			"id": "be100f48-5b94-4417-970d-74b8a35ce53c",
			"key": "long_key",
			"value": "key123456789123456789",
			"type": "string"
		},
		{
			"id": "51ef7315-55c1-4174-8725-c896a2d05948",
			"key": "some_value",
			"value": "value1",
			"type": "string"
		},
		{
			"id": "b45ff80e-b61e-4ae2-8540-ecdeda27e281",
			"key": "long_value",
			"value": "value123456789123456789",
			"type": "string"
		},
		{
			"id": "186c75b2-5ed1-49ab-a215-cfb37aa2dbcd",
			"key": "non_existent_storage",
			"value": "nonexistent",
			"type": "string"
		},
		{
			"id": "a9139e22-d64c-4f8c-87bb-63fd1eda270f",
			"key": "read_only_storage",
			"value": "read-only",
			"type": "string"
		},
		{
			"id": "0283322e-3c8e-49f9-a3ae-1054ac3a4762",
			"key": "editable_storage",
			"value": "editable-single",
			"type": "string"
		},
		{
			"id": "1a33ea6b-82d7-48f7-824b-3c58fa7a85b4",
			"key": "multieditable_storage",
			"value": "editable-multiple",
			"type": "string"
		},
		{
			"id": "78ebb23b-5db5-4b58-a91e-5b23c6673839",
			"key": "deletable_storage",
			"value": "deletable-single",
			"type": "string"
		},
		{
			"id": "1826d1c4-f05c-4853-a8b9-2540df301cae",
			"key": "multideletable_storage",
			"value": "deletable-multiple",
			"type": "string"
		},
		{
			"id": "24de665b-fbd6-4c9c-987d-6ae1c415ba1b",
			"key": "cleanable_storage",
			"value": "cleanable",
			"type": "string"
		},
		{
			"id": "8de4de84-f9c5-475d-8710-d80059b0eb84",
			"key": "temp_storage",
			"value": "temp",
			"type": "string"
		},
		{
			"id": "1707b39a-8a1f-4355-8b96-edf298fe8b22",
			"key": "acc_storage",
			"value": "account",
			"type": "string"
		},
		{
			"id": "85fcc8f9-ced7-4626-b843-a77b22456b8e",
			"key": "no_index_storage",
			"value": "no-index",
			"type": "string"
		},
		{
			"id": "eb0f9d6a-24c8-43d8-8176-e2f5a2f97987",
			"key": "storage_registry",
			"value": "storage-registry",
			"type": "string"
		},
		{
			"id": "1fbfd585-a38d-4550-b02b-d69c9c4da802",
			"key": "storage_data_template",
			"value": "storage-data",
			"type": "string"
		},
		{
			"id": "6bb71e07-dec7-4e0b-84f0-1f7c7c741318",
			"key": "storage_history_template",
			"value": "storage-history",
			"type": "string"
		},
		{
			"id": "594a8f4c-7a6f-4edb-ac3a-f16bee147db8",
			"key": "no_history_storage",
			"value": "no-history",
			"type": "string"
		},
		{
			"id": "540b321b-f0b4-4c56-9cfe-caa779df972b",
			"key": "secret",
			"value": "secret",
			"type": "string"
		},
		{
			"id": "4d0ea958-46b3-4b83-b4e9-0d773b7ab465",
			"key": "wrong_secret",
			"value": "wrong",
			"type": "string"
		}
	]
}