{
	"info": {
		"_postman_id": "64dc9765-b6a0-46b7-8520-cd161f1db601",
		"name": "cs-kv-storage",
		"description": "E2E tests for cs-kv-storage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "kv-storage",
			"description": "",
			"item": [
				{
					"name": "List keys",
					"description": null,
					"item": [
						{
                          "name": "List a storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d355335-0953-4854-8c56-48beb876dfc2",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains list of keys\", function () {",
											"    var jsonData = pm.response.json().sort();",
											"    pm.expect(jsonData).to.eql(['key1', 'key2', 'key3', 'key4', 'key5']);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
                                  "raw": "{{url}}/list/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
                                      "{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List an empty storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2517b115-9ba1-4c38-ba67-debb430bade5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is an empty array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([]);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
                                      "id": "98982517-5143-481d-a85b-8eb037420a29",
										"type": "text/javascript",
										"exec": [
                                          "const es_url = pm.variables.get(\"es_url\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
                                  "raw": "{{url}}/list/empty",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
                                      "empty"
									]
								}
							},
							"response": []
						},
						{
							"name": "List non existent storage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
                                      "id": "f2910574-e8fa-4909-a6b4-ce4fefc34250",
										"type": "text/javascript",
										"exec": [
                                          "const es_url = pm.variables.get(\"es_url\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
                                      "id": "ba93799b-5a46-42d1-88c7-b32892ad5324",
										"type": "text/javascript",
										"exec": [
                                          "pm.test(\"Status code is 404\", function() {",
                                          "  pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    var text = pm.response.text();",
											"    pm.expect(text).to.eql(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/list/nonexistent",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"nonexistent"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c60f670-969a-41c8-8a8b-7e214fa9852a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b8f7e24-ed2a-4917-8fe7-2325319de32d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get value",
					"description": "",
					"item": [
						{
							"name": "Get a value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "243f7d3c-db59-40fe-85cf-bf460eac8e91",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is text/plain\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is a \" + pm.variables.get(\"some_value\"), function () {",
											"    pm.expect(pm.response.text()).to.eql(pm.variables.get(\"some_value\"));",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
                                  "raw": "{{url}}/get/{{read_only_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
                                      "{{read_only_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get non existent value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ba2822c-4b75-4a5d-95b3-5526e219621b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
                                  "raw": "{{url}}/get/{{read_only_storage}}/{{empty_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
                                      "{{read_only_storage}}",
										"{{empty_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get from non existent storage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b5b3a0ca-49f9-4b38-9d82-64c6afb2d334",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
                                      "id": "59eb38cb-c72f-4765-bc91-51e2b23c9bb5",
										"type": "text/javascript",
										"exec": [
                                          "pm.test(\"Status code is 404\", function() {",
                                          "  pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/get/{{non_existent_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{non_existent_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "acfe6b56-9863-4802-a1b4-1a24081550cc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bdb3fe18-a2da-400a-b983-1077bb202a25",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get multiple values",
					"description": "",
					"item": [
						{
							"name": "Get values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "419e39ab-5024-4e8d-9e1f-c2b977cbd0da",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is a map key to value\", function () {",
											"    var example = {",
											"        \"key1\": \"value1\",",
											"        \"key2\": \"value2\",",
											"        \"key3\": \"value3\"",
											"    }",
											"    pm.expect(pm.response.json()).to.eql(example);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
                                  "raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
                                      "{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f585e1bf-8889-4619-b436-65f9d64d4736",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
                                  "raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
                                      "{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get with bad json body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da6eed0b-698f-4397-a98a-372d3db9a822",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\""
								},
								"url": {
                                  "raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
                                      "{{read_only_storage}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get with wrong body format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da6eed0b-698f-4397-a98a-372d3db9a822",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\""
								},
								"url": {
                                  "raw": "{{url}}/get/{{read_only_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
                                      "{{read_only_storage}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Set value",
					"description": "",
					"item": [
						{
                          "name": "Set with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "3107e8cf-4fde-481f-b508-be857a29f610",
										"type": "text/javascript",
										"exec": [
                                          "pm.test(\"Status code is 400\", function () {",
                                          "    pm.response.to.have.status(400);",
											"});",
											"pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"editable_storage\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
                                          "        pm.test(\"Document is not changed\", function () {",
                                          "        pm.expect(res.json()._source.value).to.eql(pm.variables.get(\"some_value\"));",
                                          "    });",
                                          "});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
                                      "id": "d296aab1-4aa2-4e1d-8b34-8e217df06b7e",
										"type": "text/javascript",
										"exec": [
                                          ""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
                                      "value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "newValue"
								},
								"url": {
                                  "raw": "{{url}}/set/{{editable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
                                      "{{editable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
                          "name": "Set value",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "86687f15-ce24-43ea-a77f-13c9259a0a3e",
										"type": "text/javascript",
										"exec": [
                                          "pm.test(\"Status code is 200\", function () {",
                                          "    pm.response.to.have.status(200);",
											"});",
											"pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"editable_storage\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
                                          "        pm.test(\"Document actually indexed\", function () {",
                                          "        pm.expect(res.json()[\"_source\"][\"value\"]).to.eql(\"newValue\");",
											"    });",
                                          "});",
                                          ""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
                                      "id": "546e693f-cf78-42ad-b416-ffdc2737ffc6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
                                      "value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "newValue"
								},
								"url": {
                                  "raw": "{{url}}/set/{{editable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
                                      "{{editable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Set multiple values",
					"description": "",
					"item": [
						{
                          "name": "Set with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "38f6427e-1bc6-4eea-bdeb-e3ee4954ff42",
										"type": "text/javascript",
										"exec": [
                                          "pm.test(\"Status code is 400\", function () {",
                                          "    pm.response.to.have.status(400);",
											"});",
											"",
                                          "pm.test(\"Body is empty\", function () {",
                                          "    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
                                          "        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
                                          "                    key: c._id,",
                                          "                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
                                          "                {key: \"key1\", value: \"value1\"},",
                                          "                {key: \"key2\", value: \"value2\"},",
                                          "                {key: \"key3\", value: \"value3\"},",
                                          "                {key: \"key4\", value: \"value4\"}];",
                                          "            pm.expect(result).to.eql(example);",
                                          "    });",
                                          "});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
                                      "value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n}"
								},
								"url": {
                                  "raw": "{{url}}/set/{{multieditable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
                                      "{{multieditable_storage}}"
									]
								}
							},
							"response": []
						},
						{
                          "name": "Set with bad json",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "aca9650f-90f7-4204-97d1-1fa60a726b72",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c._id,",
											"                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"value1\"},",
											"                {key: \"key2\", value: \"value2\"},",
											"                {key: \"key3\", value: \"value3\"},",
											"                {key: \"key4\", value: \"value4\"}];",
											"            pm.expect(result).to.eql(example);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
                                      "value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
                                  "raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n"
								},
								"url": {
                                  "raw": "{{url}}/set/{{multieditable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
                                      "{{multieditable_storage}}"
									]
								}
							},
							"response": []
						},
						{
                          "name": "Set with wrong body format",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "70a877c6-5b79-4d6d-b387-54d53ec3f605",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c._id,",
											"                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"value1\"},",
											"                {key: \"key2\", value: \"value2\"},",
											"                {key: \"key3\", value: \"value3\"},",
											"                {key: \"key4\", value: \"value4\"}];",
											"            pm.expect(result).to.eql(example);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
                                  "raw": "[\n\t{\"key1\": \"newValue1\"},\n\t{\"key2\": \"newValue2\"},\n\t{\"key3\": \"newValue3\"},\n\t{\"key4\": \"newValue4\"}\n]\n"
								},
								"url": {
									"raw": "{{url}}/set/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
                          "name": "Set values",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "af261c77-70da-48c7-a0d4-13e3ddacec0c",
										"type": "text/javascript",
										"exec": [
                                          "pm.test(\"Status code is 200\", function () {",
                                          "    pm.response.to.have.status(200);",
                                          "});",
                                          "",
                                          "pm.test(\"Content-Type is application/json\", function () {",
                                          "    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
                                          "pm.test(\"Response body contains statuses of operations\", function () {",
                                          "    var jsonData = pm.response.json();",
                                          "    var example = {",
                                          "        \"key1\" : true,",
                                          "        \"key2\" : true,",
                                          "        \"key3\" : true,",
                                          "        \"key4\" : true",
                                          "    }",
                                          "    pm.expect(jsonData).to.eql(example);",
											"});",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"multieditable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
                                          "        pm.test(\"Documents are actually indexed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
                                          "                    key: c[\"_id\"],",
                                          "                    value: c[\"_source\"][\"value\"]",
											"                };",
											"            })",
											"            const example = [",
                                          "                {key: \"key1\", value: \"newValue1\"},",
                                          "                {key: \"key2\", value: \"newValue2\"},",
                                          "                {key: \"key3\", value: \"newValue3\"},",
                                          "                {key: \"key4\", value: \"newValue4\"}];",
											"    });",
                                          "});",
                                          ""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
                                  "raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n}"
								},
								"url": {
                                  "raw": "{{url}}/set/{{multieditable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
                                      "{{multieditable_storage}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete value",
					"description": "",
					"item": [
						{
                          "name": "Delete from non existent storage",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "6509c34e-01ea-4c26-b835-7f3d48de89d3",
										"type": "text/javascript",
										"exec": [
                                          "pm.test(\"Status code is 404\", function () {",
                                          "    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
                                          "});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "530b5c22-7ca1-49dd-955e-ff22d92f122d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
                                  "raw": "{{url}}/delete/{{non_existent_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
                                      "{{non_existent_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
                          "name": "Delete value",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "543459eb-4ac5-408c-b600-54ec52431bd5",
										"type": "text/javascript",
										"exec": [
                                          "pm.test(\"Status code is 200\", function () {",
                                          "    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
                                          "",
                                          "pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"deletable_storage\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
                                          "        method: 'GET'},",
                                          "    function (err, res) {",
                                          "        pm.test(\"Document is actually deleted\", function () {",
                                          "            pm.expect(res.json().found).to.eql(false);",
                                          "        });",
                                          "    }",
                                          ");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "530b5c22-7ca1-49dd-955e-ff22d92f122d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
                                  "raw": "{{url}}/delete/{{deletable_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
                                      "{{deletable_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete multiple values",
					"description": "",
					"item": [
						{
                          "name": "Delete with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "1f666e79-f395-41e5-9cbe-7720255606d9",
										"type": "text/javascript",
										"exec": [
                                          "pm.test(\"Status code is 400\", function () {",
                                          "    pm.response.to.have.status(400);",
											"});",
                                          "pm.test(\"Response body is empty\", function () {",
                                          "    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
                                          "const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"multideletable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
                                          "        method: 'GET'},",
											"    function (err, res) {",
                                          "        pm.test(\"Documents are not deleted\", function () {",
                                          "            const result = res.json().docs.every(function callback(c){",
                                          "                return c.found;",
                                          "            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
                                      "value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
                                  "raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
                                      "{{multideletable_storage}}"
									]
								}
							},
							"response": []
						},
						{
                          "name": "Delete with bad json",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "fa23bc6b-a386-42f2-b0bd-8f792b0580b9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"multideletable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
                                      "value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
                                  "raw": "[\"key1\", \"key2\", \"key3\""
								},
								"url": {
                                  "raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
                                      "{{multideletable_storage}}"
									]
								}
							},
							"response": []
						},
						{
                          "name": "Delete with wrong body format",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "23ec0694-2c0f-4f59-9488-a13236b7cc35",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"multideletable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
                                      "value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
                                  "raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
                                  "raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
                                      "{{multideletable_storage}}"
									]
								}
							},
							"response": []
						},
						{
                          "name": "Delete values",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "a9336cc5-5783-437e-8c37-4ba951684259",
										"type": "text/javascript",
										"exec": [
                                          "pm.test(\"Status code is 200\", function () {",
                                          "    pm.response.to.have.status(200);",
                                          "});",
                                          "",
                                          "pm.test(\"Content-Type is application/json\", function () {",
                                          "    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
                                          "",
                                          "pm.test(\"Response body contains statuses of operations\", function () {",
                                          "    var jsonData = pm.response.json();",
                                          "    var example = {",
                                          "        \"key1\" : true,",
                                          "        \"key2\" : true,",
                                          "        \"key3\" : true",
                                          "    }",
                                          "    pm.expect(jsonData).to.eql(example);",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"multideletable_storage\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
                                          "        pm.test(\"Documents actually deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
                                          "                return !c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
                                      "value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
                                  "raw": "{{url}}/delete/{{multideletable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
                                      "{{multideletable_storage}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Clear storage",
					"description": "",
					"item": [
						{
							"name": "Clear storage",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "d6a10f21-9cc7-40d7-a9f7-0e1e19820098",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
                                          "var test = function() {",
                                          "    pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"cleanable_storage\") + \"/_doc/_search\",",
											"        method: 'POST',",
											"        header: 'Content-Type:application/json',",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({\"query\": {\"match_all\": {}}})",
											"        }},",
											"    function (err, res) {",
											"        pm.test(\"Storage is clear\", function() {",
											"            pm.expect(res.json().hits.total).to.eql(0);",
											"        });",
                                          "});",
                                          "};",
                                          "setTimeout(test, 1500);",
                                          ""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
                                      "id": "3f04a838-3537-4dd5-83cd-e97ba1a13787",
										"type": "text/javascript",
										"exec": [
                                          ""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {},
								"url": {
                                  "raw": "{{url}}/clear/{{cleanable_storage}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"clear",
                                      "{{cleanable_storage}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1614f2d8-26fe-4d0d-bcc6-d35f15fdd259",
						"type": "text/javascript",
						"exec": [
                          ""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bb925800-7558-47e4-966c-d611b1567ccd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "kv-storage-manager",
			"description": "",
			"item": [
				{
					"name": "Set temporary storage ttl",
					"description": "",
					"item": [
						{
                          "name": "Set TTL of non existent storage",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "id": "c62a36f1-c3bb-4a70-a026-516b4bc0b031",
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 404\", function () {",
                                  "    pm.response.to.have.status(404);",
                                  "})",
                                  "",
                                  "pm.test(\"Body is empty\", function () {",
                                  "    pm.expect(pm.response.text()).to.eql(\"\");",
                                  "});",
                                  ""
                                ]
                              }
                            }
                          ],
                          "request": {
                            "method": "PUT",
                            "header": [],
                            "body": {},
                            "url": {
                              "raw": "{{url}}/storage/{{non_existent_storage}}?ttl=565656",
                              "host": [
                                "{{url}}"
                              ],
                              "path": [
                                "storage",
                                "{{non_existent_storage}}"
                              ],
                              "query": [
                                {
                                  "key": "ttl",
                                  "value": "565656"
                                }
                              ]
                            }
                          },
                          "response": []
                        },
                      {
                        "name": "Set TTL of persistent storage",
                        "event": [
                          {
                            "listen": "test",
                            "script": {
                              "id": "c32e3166-863f-43d2-a928-350d787e1773",
                              "type": "text/javascript",
                              "exec": [
                                "pm.test(\"Status code is 400\", function () {",
                                "    pm.response.to.have.status(400);",
                                "})",
                                "",
                                "pm.test(\"Body is empty\", function () {",
                                "    pm.expect(pm.response.text()).to.eql(\"\");",
                                "});",
                                "",
                                "pm.sendRequest({",
                                "        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"acc_storage\"),",
                                "        method: 'GET'},",
                                "    function (err, res) {",
                                "        pm.test(\"TTL is not set\", function () {",
                                "            pm.expect(res.json()._source.ttl).to.eql(undefined);",
                                "    });",
                                "});"
                              ]
                            }
                          }
                        ],
                        "request": {
                          "method": "PUT",
                          "header": [],
                          "body": {},
                          "url": {
                            "raw": "{{url}}/storage/{{acc_storage}}?ttl=565656",
                            "host": [
                              "{{url}}"
                            ],
                            "path": [
                              "storage",
                              "{{acc_storage}}"
                            ],
                            "query": [
                              {
                                "key": "ttl",
                                "value": "565656"
                              }
                            ]
                          }
                        },
                        "response": []
                      },
                      {
                        "name": "Set bad TTL",
                        "event": [
                          {
                            "listen": "test",
                            "script": {
                              "id": "825b8fb2-352b-4a40-9e7f-7e7fa67eb5eb",
                              "type": "text/javascript",
                              "exec": [
                                "pm.test(\"Status code is 400\", function () {",
                                "    pm.response.to.have.status(400);",
                                "})",
                                "",
                                "pm.test(\"Body is empty\", function () {",
                                "    pm.expect(pm.response.text()).to.eql(\"\");",
                                "});",
                                "",
                                "pm.sendRequest({",
                                "        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"temp_storage\"),",
                                "        method: 'GET'},",
                                "    function (err, res) {",
                                "        pm.test(\"TTL is not changed\", function () {",
                                "            pm.expect(res.json()._source.ttl).to.eql(10000);",
                                "    });",
                                "});"
                              ]
                            }
                          }
                        ],
                        "request": {
                          "method": "PUT",
                          "header": [],
                          "body": {},
                          "url": {
                            "raw": "{{url}}/storage/{{temp_storage}}?ttl=10.seconds",
                            "host": [
                              "{{url}}"
                            ],
                            "path": [
                              "storage",
                              "{{temp_storage}}"
                            ],
                            "query": [
                              {
                                "key": "ttl",
                                "value": "10.seconds"
                              }
                            ]
                          }
                        },
                        "response": []
                      },
                      {
                        "name": "Send request without TTL specified",
                        "event": [
                          {
                            "listen": "test",
                            "script": {
                              "id": "d83577d7-597a-4870-a774-b4d66ae86e0b",
                              "type": "text/javascript",
                              "exec": [
                                "pm.test(\"Status code is 400\", function () {",
                                "    pm.response.to.have.status(400);",
                                "})",
                                "",
                                "pm.test(\"Body is empty\", function () {",
                                "    pm.expect(pm.response.text()).to.eql(\"\");",
                                "});",
                                "",
                                "pm.sendRequest({",
                                "        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"temp_storage\"),",
                                "        method: 'GET'},",
                                "    function (err, res) {",
                                "        pm.test(\"TTL is not changed\", function () {",
                                "            pm.expect(res.json()._source.ttl).to.eql(10000);",
                                "    });",
                                "});"
                              ]
                            }
                          }
                        ],
                        "request": {
                          "method": "PUT",
                          "header": [],
                          "body": {},
                          "url": {
                            "raw": "{{url}}/storage/{{temp_storage}}",
                            "host": [
                              "{{url}}"
                            ],
                            "path": [
                              "storage",
                              "{{temp_storage}}"
                            ]
                          }
                        },
                        "response": []
                      },
                      {
							"name": "Set temporary storage ttl",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "959bbc47-5b9a-427b-a801-9a8f91ca2745",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
                                          "})",
                                          "",
                                          "pm.test(\"Body is empty\", function () {",
                                          "    pm.expect(pm.response.text()).to.eql(\"\");",
                                          "});",
                                          "",
                                          "pm.sendRequest({",
                                          "        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"temp_storage\"),",
                                          "        method: 'GET'},",
                                          "    function (err, res) {",
                                          "        pm.test(\"TTL actually changed\", function () {",
                                          "            pm.expect(res.json()._source.ttl).to.eql(565656);",
                                          "    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {},
								"url": {
                                  "raw": "{{url}}/storage/{{temp_storage}}?ttl=565656",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"{{temp_storage}}"
									],
									"query": [
										{
											"key": "ttl",
                                          "value": "565656"
                                        }
                                    ]
                                }
                            },
                        "response": []
                      }
                    ],
                  "_postman_isSubFolder": true
                },
              {
                "name": "Delete temporary storage",
                "description": "",
                "item": [
                  {
                    "name": "Delete persistent storage",
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6030dc9-9312-42fc-8dcc-22a4ee86a63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Status code is 400\", function () {",
                            "    pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"Body is empty\", function () {",
                            "    pm.expect(pm.response.text()).to.eql(\"\");",
                            "});",
                            "",
                            "pm.sendRequest({",
                            "        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"acc_storage\"),",
                            "        method: 'HEAD'},",
                            "    function (err, res) {",
                            "        pm.test(\"Storage is not deleted\", function () {",
                            "            pm.expect(res).to.have.property('code', 200);",
                            "            pm.expect(res).to.have.property('status', 'OK');",
                            "        });",
                            "    }",
                            ");"
                          ]
                        }
                      }
                    ],
                    "request": {
                      "method": "DELETE",
                      "header": [],
                      "body": {},
                      "url": {
                        "raw": "{{url}}/storage/{{acc_storage}}",
                        "host": [
                          "{{url}}"
                        ],
                        "path": [
                          "storage",
                          "{{acc_storage}}"
                        ]
                      }
                    },
                    "response": []
                  },
                  {
                    "name": "Delete non existent storage",
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511103a4-5d8c-45b6-93e0-587ff20bd9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Status code is 404\", function () {",
                            "    pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"Body is empty\", function () {",
                            "    pm.expect(pm.response.text()).to.eql(\"\");",
                            "});",
                            ""
                          ]
                        }
                      }
                    ],
                    "request": {
                      "method": "DELETE",
                      "header": [],
                      "body": {},
                      "url": {
                        "raw": "{{url}}/storage/{{non_existent_storage}}",
                        "host": [
                          "{{url}}"
                        ],
                        "path": [
                          "storage",
                          "{{non_existent_storage}}"
                        ]
                      }
                    },
                    "response": []
                  },
                  {
                    "name": "Delete storage with no index",
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0b21d9-a19c-4b81-a7b4-4ce21d8cca50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Body is empty\", function () {",
                            "    pm.expect(pm.response.text()).to.eql(\"\");",
                            "});",
                            "",
                            "",
                            "pm.sendRequest({",
                            "        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"no_index_storage\"),",
                            "        method: 'HEAD'},",
                            "    function (err, res) {",
                            "        pm.test(\"Storage record in registry deleted\", function () {",
                            "            pm.expect(res).to.have.property('code', 404);",
                            "            pm.expect(res).to.have.property('status', 'Not Found');",
                            "        });",
                            "    }",
                            ");"
                          ]
                        }
                      }
                    ],
                    "request": {
                      "method": "DELETE",
                      "header": [],
                      "body": {},
                      "url": {
                        "raw": "{{url}}/storage/{{no_index_storage}}",
                        "host": [
                          "{{url}}"
                        ],
                        "path": [
                          "storage",
                          "{{no_index_storage}}"
                        ]
                      },
                      "description": "Delete temporary storage that have no record with its UUID in storage registry"
                    },
                    "response": []
                  },
                  {
                    "name": "Delete unregistered storage",
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1c9128-b901-4c17-8c5a-9e0854ca1fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Body is empty\", function () {",
                            "    pm.expect(pm.response.text()).to.eql(\"\");",
                            "});",
                            "",
                            "pm.sendRequest({",
                            "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"not_registered_storage\"),",
                            "        method: 'HEAD'},",
                            "    function (err, res) {",
                            "        pm.test(\"Storage index deleted\", function () {",
                            "            pm.expect(res).to.have.property('code', 404);",
                            "            pm.expect(res).to.have.property('status', 'Not Found');",
                            "        });",
                            "    }",
                            ");"
                          ]
                        }
                      }
                    ],
                    "request": {
                      "method": "DELETE",
                      "header": [],
                      "body": {},
                      "url": {
                        "raw": "{{url}}/storage/{{not_registered_storage}}",
                        "host": [
                          "{{url}}"
                        ],
                        "path": [
                          "storage",
                          "{{not_registered_storage}}"
                        ]
                      },
                      "description": "Delete temporary storage that have no record with its UUID in storage registry"
                    },
                    "response": []
                  },
                  {
                    "name": "Delete temporary storage",
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a9b830-ebd1-4805-802e-3a9cd079ae53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Body is empty\", function () {",
                            "    pm.expect(pm.response.text()).to.eql(\"\");",
                            "});",
                            "",
                            "",
                            "pm.sendRequest({",
                            "        url: pm.variables.get(\"es_url\") + \"/storage-registry/_doc/\" + pm.variables.get(\"temp_storage\"),",
                            "        method: 'HEAD'},",
                            "    function (err, res) {",
                            "        pm.test(\"Storage record in registry deleted\", function () {",
                            "            pm.expect(res).to.have.property('code', 404);",
                            "            pm.expect(res).to.have.property('status', 'Not Found');",
                            "        });",
                            "    }",
                            ");",
                            "",
                            "pm.sendRequest({",
                            "        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"temp_storage\"),",
                            "        method: 'HEAD'},",
                            "    function (err, res) {",
                            "        pm.test(\"Storage index deleted\", function () {",
                            "            pm.expect(res).to.have.property('code', 404);",
                            "            pm.expect(res).to.have.property('status', 'Not Found');",
                            "        });",
                            "    }",
                            ");"
                          ]
                        }
                      }
                    ],
                    "request": {
                      "method": "DELETE",
                      "header": [],
                      "body": {},
                      "url": {
                        "raw": "{{url}}/storage/{{temp_storage}}",
                        "host": [
                          "{{url}}"
                        ],
                        "path": [
                          "storage",
                          "{{temp_storage}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "47257ac9-4e9a-40a2-b4bf-5a2fda812bbb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "738f7413-5a71-432e-9df7-1cc3f7995c7a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
          "id": "f68c730b-ad7d-48ec-8c1f-fd09a1f300a8",
			"key": "url",
          "value": "http://app:8080",
			"type": "string"
		},
		{
          "id": "79189da9-b61e-44e6-b54a-8913f6fa98bc",
			"key": "storage_uuid",
			"value": "b3d1b2a6-bd5b-49d5-bd9e-86538fdc180d",
			"type": "string",
			"description": ""
		},
		{
          "id": "7dba3dc2-4982-4427-93bf-e599a2eef14e",
			"key": "es_url",
          "value": "http://elasticsearch:9200",
			"type": "string",
			"description": ""
		},
		{
          "id": "fd43ddac-cd43-422a-9772-a41990a59e5e",
			"key": "some_key",
			"value": "key1",
			"type": "string",
			"description": ""
		},
		{
          "id": "59435d85-c73e-4607-8325-2bf430594abc",
			"key": "some_value",
			"value": "value1",
			"type": "string",
			"description": ""
		},
		{
          "id": "aec19b91-e2d0-42f8-9566-cf32876aa67d",
			"key": "empty_key",
			"value": "empty_key",
			"type": "string",
			"description": ""
		},
		{
          "id": "d2595831-9315-4a48-a894-e496d61c16c9",
			"key": "non_existent_storage",
			"value": "nonexistent",
			"type": "string",
			"description": ""
		},
		{
          "id": "1a17064b-5a60-49b5-bf03-bd2b9295ced3",
          "key": "read_only_storage",
          "value": "read-only",
          "type": "string",
          "description": ""
        },
      {
        "id": "ee48dca6-92a2-4f61-8451-665a344e585a",
        "key": "editable_storage",
        "value": "editable-single",
        "type": "string",
        "description": ""
      },
      {
        "id": "fb4bf55b-c6d4-40ef-871b-7babfef75318",
        "key": "multieditable_storage",
        "value": "editable-multiple",
        "type": "string",
        "description": ""
      },
      {
        "id": "c8bedc45-6d39-4cac-8078-097156714cde",
        "key": "deletable_storage",
        "value": "deletable-single",
        "type": "string",
        "description": ""
      },
      {
        "id": "e3fbeb46-8c75-4f34-a220-0a07b3747542",
        "key": "multideletable_storage",
        "value": "deletable-multiple",
        "type": "string",
        "description": ""
      },
      {
        "id": "2919d9b7-e80a-4596-aabb-cccbb7104cdc",
        "key": "cleanable_storage",
        "value": "cleanable",
        "type": "string",
        "description": ""
      },
      {
        "id": "29459aaf-3a81-4838-b59a-25c19af7dc77",
			"key": "temp_storage",
        "value": "temp",
        "type": "string",
        "description": ""
      },
      {
        "id": "631d6dd7-4cd2-4a40-96ee-af480d1fd9d9",
        "key": "acc_storage",
        "value": "account",
        "type": "string",
        "description": ""
      },
      {
        "id": "6a45fb92-6642-4d4f-8c1e-f5095a89084b",
        "key": "no_index_storage",
        "value": "no-index",
        "type": "string",
        "description": ""
      },
      {
        "id": "111c436c-f6b6-4fe2-9895-a2ad826602c9",
        "key": "not_registered_storage",
        "value": "not-registered",
			"type": "string",
			"description": ""
		}
	]
}
