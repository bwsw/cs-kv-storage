{
	"info": {
		"_postman_id": "64dc9765-b6a0-46b7-8520-cd161f1db601",
		"name": "cs-kv-storage",
		"description": "E2E tests for cs-kv-storage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "kv-storage",
			"description": "",
			"item": [
				{
					"name": "List keys",
					"description": null,
					"item": [
						{
							"name": "LIst a storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d355335-0953-4854-8c56-48beb876dfc2",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains list of keys\", function () {",
											"    var jsonData = pm.response.json().sort();",
											"    pm.expect(jsonData).to.eql(['key1', 'key2', 'key3', 'key4', 'key5']);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/list/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List an empty storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2517b115-9ba1-4c38-ba67-debb430bade5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is an empty array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql([]);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a9410b7-f537-4742-82cf-8c6a1664d186",
										"type": "text/javascript",
										"exec": [
											"const es_url = pm.variables.get(\"es_url\");",
											"//create clear storage",
											"pm.sendRequest({",
											"  url: es_url + \"/storage-empty_storage\",",
											"  method: 'PUT'",
											"});",
											"//add it into registry",
											"pm.sendRequest({",
											"  url: es_url + \"/storage-registry/_doc/storage-empty_storage\",",
											"  method: 'PUT',",
											"  header: 'Content-Type:application/json',",
											"  body: {",
											"      mode: 'raw',",
											"      raw: JSON.stringify({",
											"\t        \"type\": \"ACC\",",
											"\t        \"is_history_enabled\": true})",
											"  }",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/list/empty_storage",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"empty_storage"
									]
								}
							},
							"response": []
						},
						{
							"name": "List non existent storage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "259bdec4-6644-465b-b72d-ef7294254da1",
										"type": "text/javascript",
										"exec": [
											"const es_url = pm.variables.get(\"es_url\");",
											"//try to delete storage",
											"pm.sendRequest({",
											"  url: es_url + \"/storage-nonexistent\",",
											"  method: 'DELETE'",
											"});",
											"//try to delete record in registry",
											"pm.sendRequest({",
											"  url: es_url + \"/storage-registry/_doc/storage-clear_storage\",",
											"  method: 'DELETE'",
											"});",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4122b7b6-eaa8-4494-9fe0-cafad5211bc5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function() {",
											"  pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    var text = pm.response.text();",
											"    pm.expect(text).to.eql(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/list/nonexistent",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"nonexistent"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c60f670-969a-41c8-8a8b-7e214fa9852a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b8f7e24-ed2a-4917-8fe7-2325319de32d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get value",
					"description": "",
					"item": [
						{
							"name": "Get a value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "243f7d3c-db59-40fe-85cf-bf460eac8e91",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is text/plain\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is a \" + pm.variables.get(\"some_value\"), function () {",
											"    pm.expect(pm.response.text()).to.eql(pm.variables.get(\"some_value\"));",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/get/{{storage_uuid}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{storage_uuid}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get non existent value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ba2822c-4b75-4a5d-95b3-5526e219621b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/get/{{storage_uuid}}/{{empty_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{storage_uuid}}",
										"{{empty_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get from non existent storage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b5b3a0ca-49f9-4b38-9d82-64c6afb2d334",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "970a9901-a045-41a9-8bd1-47ec27936e29",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function() {",
											"  pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/get/{{non_existent_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{non_existent_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "acfe6b56-9863-4802-a1b4-1a24081550cc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bdb3fe18-a2da-400a-b983-1077bb202a25",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get multiple values",
					"description": "",
					"item": [
						{
							"name": "Get values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "419e39ab-5024-4e8d-9e1f-c2b977cbd0da",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body is a map key to value\", function () {",
											"    var example = {",
											"        \"key1\": \"value1\",",
											"        \"key2\": \"value2\",",
											"        \"key3\": \"value3\"",
											"    }",
											"    pm.expect(pm.response.json()).to.eql(example);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/get/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f585e1bf-8889-4619-b436-65f9d64d4736",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/get/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get with bad json body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da6eed0b-698f-4397-a98a-372d3db9a822",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\""
								},
								"url": {
									"raw": "{{url}}/get/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get with wrong body format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da6eed0b-698f-4397-a98a-372d3db9a822",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\""
								},
								"url": {
									"raw": "{{url}}/get/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"get",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Set value",
					"description": "",
					"item": [
						{
							"name": "Set value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32ad74d5-d97d-40d0-95bf-f3a08d0a79da",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Document actually indexed\", function () {",
											"        pm.expect(res.json()[\"_source\"][\"value\"]).to.eql(\"newValue\");",
											"        pm.sendRequest({",
											"            url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"            method: 'PUT',",
											"            header: 'Content-Type:application/json',",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({\"value\": pm.variables.get(\"some_value\")})",
											"            }",
											"        });",
											"    });",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "228bb11b-cbd7-4ef3-8a51-3b505853ae38",
										"type": "text/javascript",
										"exec": [
											"const value = \"newValue\""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "newValue"
								},
								"url": {
									"raw": "{{url}}/set/{{storage_uuid}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{storage_uuid}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45b0819b-cc3b-41e8-8754-086c297d7c53",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Document is not changed\", function () {",
											"        pm.expect(res.json()._source.value).to.eql(pm.variables.get(\"some_value\"));",
											"    });",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d296aab1-4aa2-4e1d-8b34-8e217df06b7e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "newValue"
								},
								"url": {
									"raw": "{{url}}/set/{{storage_uuid}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{storage_uuid}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Set multiple values",
					"description": "",
					"item": [
						{
							"name": "Set values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8996b813-df18-4f44-806b-3956426a6007",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains statuses of operations\", function () {",
											"    var jsonData = pm.response.json();",
											"    var example = {",
											"        \"key1\" : true,",
											"        \"key2\" : true,",
											"        \"key3\" : true,",
											"        \"key4\" : true",
											"    }",
											"    pm.expect(jsonData).to.eql(example);",
											"});",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are actually indexed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c[\"_id\"],",
											"                    value: c[\"_source\"][\"value\"]",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"newValue1\"},",
											"                {key: \"key2\", value: \"newValue2\"},",
											"                {key: \"key3\", value: \"newValue3\"},",
											"                {key: \"key4\", value: \"newValue4\"}];",
											"            pm.sendRequest({",
											"                url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/_bulk\",",
											"                method: 'POST',",
											"                header: 'Content-Type:application/json',",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: ",
											"                    '{\"index\": {\"_id\": \"key1\"}}\\n{\"value\": \"value1\"}\\n' +",
											"                    '{\"index\": {\"_id\": \"key2\"}}\\n{\"value\": \"value2\"}\\n' +",
											"                    '{\"index\": {\"_id\": \"key3\"}}\\n{\"value\": \"value3\"}\\n' +",
											"                    '{\"index\": {\"_id\": \"key4\"}}\\n{\"value\": \"value4\"}\\n'",
											"                }",
											"            });",
											"    });",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n}"
								},
								"url": {
									"raw": "{{url}}/set/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "076ad2df-2b03-41ef-95ea-fe087e9ea78d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c._id,",
											"                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"value1\"},",
											"                {key: \"key2\", value: \"value2\"},",
											"                {key: \"key3\", value: \"value3\"},",
											"                {key: \"key4\", value: \"value4\"}];",
											"            pm.expect(result).to.eql(example);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n}"
								},
								"url": {
									"raw": "{{url}}/set/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set with bad json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c14239a1-c8fa-4de6-91a4-fae66d73a11a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c._id,",
											"                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"value1\"},",
											"                {key: \"key2\", value: \"value2\"},",
											"                {key: \"key3\", value: \"value3\"},",
											"                {key: \"key4\", value: \"value4\"}];",
											"            pm.expect(result).to.eql(example);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key1\": \"newValue1\",\n\t\"key2\": \"newValue2\",\n\t\"key3\": \"newValue3\",\n\t\"key4\": \"newValue4\"\n"
								},
								"url": {
									"raw": "{{url}}/set/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set with wrong body format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9979a932-cf4a-4fd3-8536-3c5b2c9627ef",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\",\"key4\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not changed\", function () {",
											"            const result = res.json()[\"docs\"].map(function callback(c, i, a){",
											"                return {",
											"                    key: c._id,",
											"                    value: c._source.value",
											"                };",
											"            })",
											"            const example = [",
											"                {key: \"key1\", value: \"value1\"},",
											"                {key: \"key2\", value: \"value2\"},",
											"                {key: \"key3\", value: \"value3\"},",
											"                {key: \"key4\", value: \"value4\"}];",
											"            pm.expect(result).to.eql(example);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\"key1\": \"newValue1\"},\n\t{\"key2\": \"newValue2\"},\n\t{\"key3\": \"newValue3\"},\n\t{\"key4\": \"newValue4\"}\n]\n"
								},
								"url": {
									"raw": "{{url}}/set/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"set",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete value",
					"description": "",
					"item": [
						{
							"name": "Delete value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21d7e3d4-d5bc-47ad-9643-f46b3a5c1325",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/\" + pm.variables.get(\"some_key\"),",
											"        method: 'PUT',",
											"        header: 'Content-Type:application/json',",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({\"value\": pm.variables.get(\"some_value\")})",
											"        }},",
											"    function (err, res) {",
											"        pm.test(\"Document is actually deleted\", function () {",
											"            pm.expect(res.json().result).to.eql(\"created\");",
											"            ",
											"        });",
											"    }",
											");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "530b5c22-7ca1-49dd-955e-ff22d92f122d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/delete/{{storage_uuid}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{storage_uuid}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete from non existent storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db97aa22-f3e9-4849-97e3-953b0fc729a3",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "530b5c22-7ca1-49dd-955e-ff22d92f122d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/delete/{{non_existent_storage}}/{{some_key}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{non_existent_storage}}",
										"{{some_key}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete multiple values",
					"description": "",
					"item": [
						{
							"name": "Delete values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "510e11bc-0569-4707-af26-2f5283184a14",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains statuses of operations\", function () {",
											"    var jsonData = pm.response.json();",
											"    var example = {",
											"        \"key1\" : true,",
											"        \"key2\" : true,",
											"        \"key3\" : true",
											"    }",
											"    pm.expect(jsonData).to.eql(example);",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/_bulk\",",
											"        method: 'POST',",
											"        header: 'Content-Type:application/json',",
											"        body: {",
											"            mode: 'raw',",
											"            raw: ",
											"            '{\"index\": {\"_id\": \"key1\"}}\\n{\"value\": \"value1\"}\\n' +",
											"            '{\"index\": {\"_id\": \"key2\"}}\\n{\"value\": \"value2\"}\\n' +",
											"            '{\"index\": {\"_id\": \"key3\"}}\\n{\"value\": \"value3\"}\\n'",
											"        }},",
											"    function (err, res) {",
											"        pm.test(\"Documents are actually deleted\", function () {",
											"            const result = res.json().items.every(function callback(c){",
											"                return c.index.result == \"created\"",
											"            })",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/delete/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete with wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bda7a37a-0de8-4559-b169-8cc51a4feb2b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/delete/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete with bad json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bda7a37a-0de8-4559-b169-8cc51a4feb2b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\""
								},
								"url": {
									"raw": "{{url}}/delete/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete with wrong body format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bda7a37a-0de8-4559-b169-8cc51a4feb2b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"const source = JSON.stringify({\"ids\": [\"key1\",\"key2\",\"key3\"]})",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-\" + pm.variables.get(\"storage_uuid\") + \"/_doc/_mget?source=\" + source + \"&source_content_type=application/json\",",
											"        method: 'GET'},",
											"    function (err, res) {",
											"        pm.test(\"Documents are not deleted\", function () {",
											"            const result = res.json().docs.every(function callback(c){",
											"                return c.found;",
											"            });",
											"            pm.expect(result).to.eql(true);",
											"        });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"key1\", \"key2\", \"key3\"]"
								},
								"url": {
									"raw": "{{url}}/delete/{{storage_uuid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"delete",
										"{{storage_uuid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Clear storage",
					"description": "",
					"item": [
						{
							"name": "Clear storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbd6fba0-ecba-4843-9db8-11690fe66ba6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body is empty\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"es_url\") + \"/storage-removable/_doc/_search\",",
											"        method: 'POST',",
											"        header: 'Content-Type:application/json',",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({\"query\": {\"match_all\": {}}})",
											"        }},",
											"    function (err, res) {",
											"        pm.test(\"Storage is clear\", function() {",
											"            pm.expect(res.json().hits.total).to.eql(0);",
											"        });",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "070f8a1f-6c1a-428c-9847-7c1c312cd864",
										"type": "text/javascript",
										"exec": [
											"// const es_url = pm.variables.get(\"es_url\");",
											"// const storage = \"storage-removable\" ;",
											"// if (pm.environment.get(\"is_test_storage_set\") !== true) {",
											"//     //create test storage",
											"//     pm.sendRequest({",
											"//       url: es_url + \"/\" + storage,",
											"//       method: 'PUT'",
											"//     });",
											"//     //fill it with records",
											"//     pm.sendRequest({",
											"//       url: es_url + \"/\" + storage + \"/_doc/_bulk\",",
											"//       method: 'PUT',",
											"//       header: 'Content-Type:application/json',",
											"//       body: {",
											"//           mode: 'raw',",
											"//           raw: ",
											"//           '{\"index\": {\"_id\": \"key1\"}}\\n{\"value\": \"value1\"}\\n' + ",
											"//           '{\"index\": {\"_id\": \"key2\"}}\\n{\"value\": \"value2\"}\\n' + ",
											"//           '{\"index\": {\"_id\": \"key3\"}}\\n{\"value\": \"value3\"}\\n' + ",
											"//           '{\"index\": {\"_id\": \"key4\"}}\\n{\"value\": \"value4\"}\\n' + ",
											"//           '{\"index\": {\"_id\": \"key5\"}}\\n{\"value\": \"value5\"}\\n'",
											"//       }",
											"//     });",
											"//     pm.environment.set(\"is_test_storage_set\", true);",
											"// }"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/clear/removable",
									"host": [
										"{{url}}"
									],
									"path": [
										"clear",
										"removable"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1614f2d8-26fe-4d0d-bcc6-d35f15fdd259",
						"type": "text/javascript",
						"exec": [
							"const es_url = pm.variables.get(\"es_url\");",
							"const storage = \"storage-\" + pm.variables.get(\"storage_uuid\");",
							"if (pm.environment.get(\"is_test_storage_set\") !== true) {",
							"    //create test storage",
							"    pm.sendRequest({",
							"      url: es_url + \"/\" + storage,",
							"      method: 'PUT'",
							"    });",
							"    //fill it with records",
							"    pm.sendRequest({",
							"      url: es_url + \"/\" + storage + \"/_doc/_bulk\",",
							"      method: 'PUT',",
							"      header: 'Content-Type:application/json',",
							"      body: {",
							"          mode: 'raw',",
							"          raw: ",
							"          '{\"index\": {\"_id\": \"key1\"}}\\n{\"value\": \"value1\"}\\n' + ",
							"          '{\"index\": {\"_id\": \"key2\"}}\\n{\"value\": \"value2\"}\\n' + ",
							"          '{\"index\": {\"_id\": \"key3\"}}\\n{\"value\": \"value3\"}\\n' + ",
							"          '{\"index\": {\"_id\": \"key4\"}}\\n{\"value\": \"value4\"}\\n' + ",
							"          '{\"index\": {\"_id\": \"key5\"}}\\n{\"value\": \"value5\"}\\n'",
							"      }",
							"    });",
							"    pm.environment.set(\"is_test_storage_set\", true);",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bb925800-7558-47e4-966c-d611b1567ccd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "kv-storage-manager",
			"description": "",
			"item": [
				{
					"name": "Set temporary storage ttl",
					"description": "",
					"item": [
						{
							"name": "Set temporary storage ttl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ccfe145-e84a-4e67-b083-f18e8efc7b08",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/storage/{{temp_storage}}?ttl=100000",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"{{temp_storage}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "47257ac9-4e9a-40a2-b4bf-5a2fda812bbb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "738f7413-5a71-432e-9df7-1cc3f7995c7a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "07c3d4af-0aa7-4af4-9cb3-861af2a64598",
			"key": "url",
			"value": "http://localhost:8080/",
			"type": "string"
		},
		{
			"id": "eeeab95a-9f96-4ef2-a26a-20f291952042",
			"key": "storage_uuid",
			"value": "b3d1b2a6-bd5b-49d5-bd9e-86538fdc180d",
			"type": "string",
			"description": ""
		},
		{
			"id": "82219a72-50cb-498d-9343-a678b22a38f9",
			"key": "es_url",
			"value": "http://localhost:9200/",
			"type": "string",
			"description": ""
		},
		{
			"id": "e1b7b95e-4ff6-492f-8265-757312c484fa",
			"key": "some_key",
			"value": "key1",
			"type": "string",
			"description": ""
		},
		{
			"id": "1549ee7d-f89a-4e28-8201-d7714bf550b2",
			"key": "some_value",
			"value": "value1",
			"type": "string",
			"description": ""
		},
		{
			"id": "6c857258-bc8c-49c9-a812-00d2b622ce59",
			"key": "empty_key",
			"value": "empty_key",
			"type": "string",
			"description": ""
		},
		{
			"id": "236fb85b-fcdc-40f3-8459-18cecdf58be8",
			"key": "non_existent_storage",
			"value": "nonexistent",
			"type": "string",
			"description": ""
		},
		{
			"id": "a04f8062-574f-48be-a31d-339305ae764e",
			"key": "temp_storage",
			"value": "24138626-91bc-4e85-92e6-82b00c6edd28",
			"type": "string",
			"description": ""
		}
	]
}